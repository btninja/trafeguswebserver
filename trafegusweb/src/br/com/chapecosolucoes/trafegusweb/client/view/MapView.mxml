<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 initialize="init()"
		 xmlns:maps="com.google.maps.*">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import br.com.chapecosolucoes.trafegusweb.client.components.messagebox.MessageBox;
			import br.com.chapecosolucoes.trafegusweb.client.controller.MapController;
			import br.com.chapecosolucoes.trafegusweb.client.model.MainModel;
			import br.com.chapecosolucoes.trafegusweb.client.utils.PolyLineMidPoint;
			import br.com.chapecosolucoes.trafegusweb.client.vo.DistanciaDeAteReferenciaEVeiculoVO;
			import br.com.chapecosolucoes.trafegusweb.client.vo.DistanciaDeAteReferenciasVO;
			import br.com.chapecosolucoes.trafegusweb.client.vo.DistanciaDeAteVO;
			import br.com.chapecosolucoes.trafegusweb.client.vo.DistanciaDeAteVeiculosVO;
			import br.com.chapecosolucoes.trafegusweb.client.vo.HistoricoPosicoesVeiculoVO;
			import br.com.chapecosolucoes.trafegusweb.client.vo.PosicaoVeiculoVO;
			import br.com.chapecosolucoes.trafegusweb.client.vo.ReferenciaVO;
			
			import com.google.maps.InfoWindowOptions;
			import com.google.maps.LatLng;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.examples.TooltipOverlay;
			import com.google.maps.overlays.Marker;
			import com.google.maps.overlays.MarkerOptions;
			import com.google.maps.overlays.Polyline;
			import com.google.maps.overlays.PolylineOptions;
			import com.google.maps.services.Directions;
			import com.google.maps.styles.StrokeStyle;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			private var controller:MapController;
			private function init():void
			{
				controller = new MapController();
				controller.view = this;
			}
			public function carregarReferencias():void
			{
				if(MainModel.getInstance().mapReady == true)
				{
					this.removeCategories();
					for each (var referencia:ReferenciaVO in MainModel.getInstance().referencias)
					{
						this.createCategorie(referencia);
					}
				}
				else
				{
					MessageBox.atencao("Favor aguardar carga do mapa");
				}
			}
			public function distanciaEntreReferencias(value:DistanciaDeAteReferenciasVO):void
			{
				if(MainModel.getInstance().distanciaEntreReferencias != null)
				{
					map.removeOverlay(MainModel.getInstance().distanciaEntreReferencias.marker);
					map.removeOverlay(MainModel.getInstance().distanciaEntreReferencias.tooltip);
					map.removeOverlay(MainModel.getInstance().distanciaEntreReferencias.polyLine);
				}
				else
				{
					MainModel.getInstance().distanciaEntreReferencias = value;
				}
				var pontos:Array = new Array();
				pontos.push(value.de.latLong);
				pontos.push(value.ate.latLong);
				value.polyLine = new Polyline
					(
						pontos,
						new PolylineOptions
						({
							strokeStyle: new StrokeStyle(
								{
									color: 0xff0000,
									thickness: 4,
									alpha: 0.7
								})
						})
					);
				value.marker = new Marker(value.meio);
				value.tooltip = new TooltipOverlay(value.meio, value.distanciaDeAte());
				value.marker.addEventListener(MapMouseEvent.CLICK, function(e:MapMouseEvent):void
				{
					value.marker.openInfoWindow(new InfoWindowOptions({contentHTML: value.getHtml()}));
				});
				value.marker.addEventListener(MapMouseEvent.ROLL_OVER, function(e:MapMouseEvent):void
				{
					map.addOverlay(value.tooltip);
				});
				value.marker.addEventListener(MapMouseEvent.ROLL_OUT, function(e:MapMouseEvent):void
				{
					map.removeOverlay(value.tooltip);
				});
				map.addOverlay(value.marker);
				map.addOverlay(value.polyLine);
				map.setCenter(value.meio);
				map.setZoom(map.getBoundsZoomLevel(value.polyLine.getLatLngBounds()));
				MainModel.getInstance().distanciaEntreReferencias.tooltip = value.tooltip;
				MainModel.getInstance().distanciaEntreReferencias.marker = value.marker;
				MainModel.getInstance().distanciaEntreReferencias.polyLine = value.polyLine;
			}
			public function distanciaEntreReferenciaEVeiculo(value:DistanciaDeAteReferenciaEVeiculoVO):void
			{
				if(MainModel.getInstance().distanciaEntreReferenciaEVeiculo != null)
				{
					map.removeOverlay(MainModel.getInstance().distanciaEntreReferenciaEVeiculo.marker);
					map.removeOverlay(MainModel.getInstance().distanciaEntreReferenciaEVeiculo.tooltip);
					map.removeOverlay(MainModel.getInstance().distanciaEntreReferenciaEVeiculo.polyLine);
				}
				else
				{
					MainModel.getInstance().distanciaEntreReferenciaEVeiculo = value;
				}
				var pontos:Array = new Array();
				pontos.push(value.de.latLong);
				pontos.push(value.ate.latLong);
				value.polyLine = new Polyline
					(
						pontos,
						new PolylineOptions
						({
							strokeStyle: new StrokeStyle(
								{
									color: 0x00ff00,
									thickness: 4,
									alpha: 0.7
								})
						})
					);
				value.marker = new Marker(value.meio);
				value.tooltip = new TooltipOverlay(value.meio, value.distanciaDeAte());
				value.marker.addEventListener(MapMouseEvent.CLICK, function(e:MapMouseEvent):void
				{
					value.marker.openInfoWindow(new InfoWindowOptions({contentHTML: value.getHtml()}));
				});
				value.marker.addEventListener(MapMouseEvent.ROLL_OVER, function(e:MapMouseEvent):void
				{
					map.addOverlay(value.tooltip);
				});
				value.marker.addEventListener(MapMouseEvent.ROLL_OUT, function(e:MapMouseEvent):void
				{
					map.removeOverlay(value.tooltip);
				});
				map.addOverlay(value.marker);
				map.addOverlay(value.polyLine);
				map.setCenter(value.meio);
				map.setZoom(map.getBoundsZoomLevel(value.polyLine.getLatLngBounds()));
				MainModel.getInstance().distanciaEntreReferenciaEVeiculo.tooltip = value.tooltip;
				MainModel.getInstance().distanciaEntreReferenciaEVeiculo.marker = value.marker;
				MainModel.getInstance().distanciaEntreReferenciaEVeiculo.polyLine = value.polyLine;
			}
			public function distanciaEntreVeiculos(value:DistanciaDeAteVeiculosVO):void
			{
				if(MainModel.getInstance().distanciaEntreVeiculos != null)
				{
					map.removeOverlay(MainModel.getInstance().distanciaEntreVeiculos.marker);
					map.removeOverlay(MainModel.getInstance().distanciaEntreVeiculos.tooltip);
					map.removeOverlay(MainModel.getInstance().distanciaEntreVeiculos.polyLine);
				}
				else
				{
					MainModel.getInstance().distanciaEntreVeiculos = value;
				}
				var pontos:Array = new Array();
				pontos.push(value.de.latLong);
				pontos.push(value.ate.latLong);
				value.polyLine = new Polyline
					(
						pontos,
						new PolylineOptions
						({
							strokeStyle: new StrokeStyle(
								{
									color: 0x0000ff,
									thickness: 4,
									alpha: 0.7
								})
						})
					);
				value.marker = new Marker(value.meio);
				value.tooltip = new TooltipOverlay(value.meio, value.distanciaDeAte());
				value.marker.addEventListener(MapMouseEvent.CLICK, function(e:MapMouseEvent):void
				{
					value.marker.openInfoWindow(new InfoWindowOptions({contentHTML: value.getHtml()}));
				});
				value.marker.addEventListener(MapMouseEvent.ROLL_OVER, function(e:MapMouseEvent):void
				{
					map.addOverlay(value.tooltip);
				});
				value.marker.addEventListener(MapMouseEvent.ROLL_OUT, function(e:MapMouseEvent):void
				{
					map.removeOverlay(value.tooltip);
				});
				map.addOverlay(value.marker);
				map.addOverlay(value.polyLine);
				map.setCenter(value.meio);
				map.setZoom(map.getBoundsZoomLevel(value.polyLine.getLatLngBounds()));
				MainModel.getInstance().distanciaEntreVeiculos.tooltip = value.tooltip;
				MainModel.getInstance().distanciaEntreVeiculos.marker = value.marker;
				MainModel.getInstance().distanciaEntreVeiculos.polyLine = value.polyLine;
			}
			public function rotaVeiculo(value:ArrayCollection):void
			{
				if(MainModel.getInstance().rota != null)
				{
					map.removeOverlay(MainModel.getInstance().rota);
				}
				var historicoPosicoes:Array = new Array();
				for each (var route:HistoricoPosicoesVeiculoVO in value)
				{
					historicoPosicoes.push(route.latLong);
				}
				var polyLine:Polyline = new Polyline
				(
					historicoPosicoes,
					new PolylineOptions
					({
						strokeStyle: new StrokeStyle(
							{
								color: 0x0000ff,
								thickness: 4,
								alpha: 0.7
							})
					})
				);
				map.addOverlay(polyLine);
				MainModel.getInstance().rota = polyLine;
			}
			public function posicaoVeiculosArray(value:ArrayCollection):void
			{
				if(MainModel.getInstance().mapReady == true)
				{
					map.clearOverlays();
					for each (var posVeiculoVO:PosicaoVeiculoVO in value)
					{
						map.addOverlay(createMarker(posVeiculoVO));
					}
					map.setCenter(new LatLng(-15.779413016690475, -47.929744720458984), 4);
				}
			}
			public function posicaoVeiculoVO():void
			{
				map.setCenter(MainModel.getInstance().posicaoVeiculoVO.latLong, 15);
			}
			[Embed(source="assets/caminhao_verde.png")]
			private var IconeCaminhaoVerde:Class;
			
			[Embed(source="assets/caminhao_amarelo.png")]
			private var IconeCaminhaoAmarelo:Class;
			public function createMarker(posicaoVeiculoVO:PosicaoVeiculoVO):Marker
			{
				var makerOp:MarkerOptions = new MarkerOptions();
				if (posicaoVeiculoVO.ignition == 0)
					makerOp.icon = new IconeCaminhaoAmarelo();
				else
					makerOp.icon = new IconeCaminhaoVerde();
				
				var marker:Marker = new Marker(posicaoVeiculoVO.latLong, makerOp);
				var tooltip:TooltipOverlay = new TooltipOverlay(posicaoVeiculoVO.latLong, posicaoVeiculoVO.gpsDescSis);
				//marker.addEventListener(MapMouseEvent.CLICK, this.controller.mapMouseEventHandler);
				var html:String = "<b>" + posicaoVeiculoVO.vehiclePlate + "</b> <br/>" + posicaoVeiculoVO.motoristaPrincipal + "<br/>" + posicaoVeiculoVO.gpsDescSis + "<br/>" +posicaoVeiculoVO.dataEHora;
				marker.addEventListener(MapMouseEvent.CLICK, function(e:MapMouseEvent):void
				{
					//this.view.map.setCenter(e.latLng,15);
					marker.openInfoWindow(new InfoWindowOptions({contentHTML: html}));
				});
				marker.addEventListener(MapMouseEvent.ROLL_OVER, function(e:MapMouseEvent):void
				{
					map.addOverlay(tooltip);
				});
				marker.addEventListener(MapMouseEvent.ROLL_OUT, function(e:MapMouseEvent):void
				{
					map.removeOverlay(tooltip);
				});
				return marker;
			}
			private function removeCategories():void{
				for each(var marker:Marker in MainModel.getInstance().markers)
				{
					map.removeOverlay(marker);
				}
			}
			private function createCategorie(referencia:ReferenciaVO):void
			{
				var markerOp:MarkerOptions = new MarkerOptions();
				var clazz:Class = MainModel.getInstance().getClassesReferenciaIcons(int(referencia.codigo)); 
				markerOp.icon = new clazz();
				
				var marker:Marker = new Marker(referencia.latLong, markerOp);
				var tooltip:TooltipOverlay = new TooltipOverlay(referencia.latLong, referencia.refeDescricao);
				var html:String = "<b>" + referencia.refeDescricao + "</b> <br/>" + referencia.descricao;
				marker.addEventListener(MapMouseEvent.CLICK, function(e:MapMouseEvent):void
				{
					marker.openInfoWindow(new InfoWindowOptions({contentHTML: html}));
				});
				marker.addEventListener(MapMouseEvent.ROLL_OVER, function(e:MapMouseEvent):void
				{
					map.addOverlay(tooltip);
				});
				marker.addEventListener(MapMouseEvent.ROLL_OUT, function(e:MapMouseEvent):void
				{
					map.removeOverlay(tooltip);
				});
				map.addOverlay(marker);
				MainModel.getInstance().markers.addItem(marker);
			}
			/* private function toggleCategory(type:String):void
			{
				for (var i:Number = 0; i < categories[type].markers.length; i++)
				{
					var marker:Marker = categories[type].markers[i];
					if (!marker.visible)
					{
						marker.visible = true;
					}
					else
					{
						marker.visible = false;
					}
				}
			} */
		]]>
	</fx:Script>
	<maps:Map id="map"
			  key="ABQIAAAAzLOtdcPXfM2lE08HYYoOtBRjLyj5ojzoC0E4DRI1gCu_z1OhKRTdmypwjwm7FVWCeee1VpIL-w0z1A"
			  mapevent_mapready="controller.onMapReady(event)"
			  width="100%"
			  height="100%"/>
</s:Group>
