<?xml version="1.0" encoding="utf-8"?>
<resize:ResizableWindow xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:resize="flex.utils.ui.resize.*" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				layout="vertical"
				showCloseButton="true"
				width="720" height="420"
				creationCompleteEffect="{dissolve,iris}"
				removedEffect="{dissolve,iris}"
				initialize="init()"
				creationComplete="creationComplete()"
				close="closeHandler()"
				title="SMs do veiculo"
				titleIcon="@Embed(source='assets/wifi.png')" xmlns:searchInput="br.com.chapecosolucoes.trafegusweb.client.components.searchInput.*" xmlns:view="br.com.chapecosolucoes.trafegusweb.client.components.renderers.view.*">
	<fx:Binding source="this.textInputFiltro.text" destination="MainModel.getInstance().zoomFilter"/>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:Dissolve id="dissolve" duration="500"/>
		<mx:Iris id="iris" duration="500"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import br.com.chapecosolucoes.trafegusweb.client.components.mypopupmanager.MyPopUpManager;
			import br.com.chapecosolucoes.trafegusweb.client.controller.SMGridController;
			import br.com.chapecosolucoes.trafegusweb.client.model.MainModel;
			import br.com.chapecosolucoes.trafegusweb.client.model.SMGridModel;
			import br.com.chapecosolucoes.trafegusweb.client.vo.LocalVO;
			import br.com.chapecosolucoes.trafegusweb.client.vo.MonitoringRequestVO;
			import br.com.chapecosolucoes.trafegusweb.client.vo.RouteVO;
			import br.com.chapecosolucoes.trafegusweb.client.vo.VeiculoVO;
			
			import mx.managers.PopUpManager;
			public var placaVeiculo:String;
			public var controller:SMGridController;
			[Bindable]
			public var model:SMGridModel;
			private function closeHandler():void
			{
				MyPopUpManager.removePopUp(this);
			}
			private function init():void
			{
				this.controller = new SMGridController();
				this.model = new SMGridModel();
				this.controller.model = this.model;
				this.model.placaVeiculo = this.placaVeiculo;
				this.controller.view = this;
				
				this.controller.solicitaTotalSMVeiculo();
			}
			private function creationComplete():void
			{
				this.controller.atualizaListaSM();
				
				MainModel.getInstance().smArray.filterFunction = this.controller.smFilterFunction;
				MainModel.getInstance().smArray.refresh();
			}
			private function labelFunction(item:Object,column:DataGridColumn):String
			{
				switch(column.headerText)
				{
					case "Número da Viagem":
						return MonitoringRequestVO(item).numeroViagem;
					case "Operação":
						return MonitoringRequestVO(item).operacao;
					case "Placa":
						return VeiculoVO(MonitoringRequestVO(item).veiculoPrincipal).vehiclePlate;
					case "Terminal":
						return MonitoringRequestVO(item).terminal;
					case "Data Cadastro":
						return MonitoringRequestVO(item).dataCadastro;
					case "Transportador":
						return MonitoringRequestVO(item).nomeTransportador;
					case "Embarcador":
						return MonitoringRequestVO(item).nomeEmbarcador;
					case "Origem":
						return LocalVO(RouteVO(MonitoringRequestVO(item).rota).localOrigem).descricao;
					case "Destino":
						return LocalVO(RouteVO(MonitoringRequestVO(item).rota).localDestino).descricao;
					case "Prev. inicio":
						return MonitoringRequestVO(item).prevInicio;
					case "Prev. fim":
						return MonitoringRequestVO(item).prevFim;
					default:
						return "";
				}
			}
		]]>
	</fx:Script>
	<searchInput:SearchInputFX
		id="textInputFiltro"
		width="100%" 
		text="{MainModel.getInstance().zoomFilter}"
		keyUp="MainModel.getInstance().smArray.refresh()"
		refreshEvent="this.controller.atualizaListaSM()"/>
	<mx:DataGrid
		id="grid"
		dataProvider="{MainModel.getInstance().smArray}"
		doubleClickEnabled="true"
		labelFunction="labelFunction"
		doubleClick="this.controller.editarSM()"
		width="100%"
		height="100%">
		<mx:columns>
			<mx:DataGridColumn sortable="false" width="20" headerRenderer="br.com.chapecosolucoes.trafegusweb.client.components.renderers.view.DataGridHeaderRenderer"/>
			<mx:DataGridColumn headerText="Número da Viagem" />
			<mx:DataGridColumn headerText="Operação" />
			<mx:DataGridColumn headerText="Placa" />
			<mx:DataGridColumn headerText="Terminal" />
			<mx:DataGridColumn headerText="Data Cadastro" />
			<mx:DataGridColumn headerText="Transportador" />
			<mx:DataGridColumn headerText="Embarcador" />
			<mx:DataGridColumn headerText="Origem" />
			<mx:DataGridColumn headerText="Destino" />
			<mx:DataGridColumn headerText="Prev. inicio" />
			<mx:DataGridColumn headerText="Prev. fim" />
		</mx:columns>
	</mx:DataGrid>
	<view:PaginableComponent 
		id="paginable"
		totalRecords="{MainModel.getInstance().totalSMVeiculo}"
		itensPorPagina="{MainModel.getInstance().itensPorPaginaVO.itensPorPagina}"
		first="this.controller.solicitaSMVeiculo(event)"
		last="this.controller.solicitaSMVeiculo(event)"
		next="this.controller.solicitaSMVeiculo(event)"
		prev="this.controller.solicitaSMVeiculo(event)"/>
	<mx:ControlBar width="100%" horizontalAlign="right">
		<s:Button label="Adicionar" click="this.controller.novaSM()"/>
		<s:Button label="Editar" click="this.controller.editarSM()"/>
		<s:Button label="Voltar" click="this.closeHandler()"/>
	</mx:ControlBar>
</resize:ResizableWindow>
