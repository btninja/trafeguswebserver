<?xml version="1.0" encoding="utf-8"?>
<resize:ResizableWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:resize="flex.utils.ui.resize.*"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	layout="vertical"
	width="520"
	height="420"
	movable="true"
	resizable="false"
	showCloseButton="true"
	creationCompleteEffect="{dissolve,iris}"
	removedEffect="{dissolve,iris}"
	preinitialize="init()"
	creationComplete="creationComplete()"
	close="this.controller.closeHandler()"
	title="Modelo de veiculo"
	titleIcon="@Embed(source='assets/cam(Teal).png')"
	xmlns:searchInput="br.com.chapecosolucoes.trafegusweb.client.components.searchInput.*"
	xmlns:view="br.com.chapecosolucoes.trafegusweb.client.components.renderers.view.*">
	<fx:Binding source="this.textInputFiltro.text"
				destination="MainModel.getInstance().zoomFilter"/>
	<fx:Metadata>
		[Event(name="mvecModeloVeiculoSelecionadoEvent",type="br.com.chapecosolucoes.trafegusweb.client.events.MvecModeloVeiculoSelecionadoEvent")]		
	</fx:Metadata>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:Dissolve id="dissolve"
					 duration="500"/>
		<mx:Iris id="iris"
				 duration="500"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import br.com.chapecosolucoes.trafegusweb.client.components.messagebox.MessageBox;
			import br.com.chapecosolucoes.trafegusweb.client.components.sjd.managers.ResizeManager;
			import br.com.chapecosolucoes.trafegusweb.client.components.zoom.controller.MvecModeloVeiculoZoomController;
			import br.com.chapecosolucoes.trafegusweb.client.model.MainModel;
			import br.com.chapecosolucoes.trafegusweb.client.vo.MvecModeloVeiculoVO;
			import br.com.chapecosolucoes.trafegusweb.client.vo.MveiMarcaVeiculo;
			
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			private var controller:MvecModeloVeiculoZoomController;
			
			private function init():void
			{
				this.controller=new MvecModeloVeiculoZoomController();
				this.controller.view=this;
				
				ResizeManager.enableResize(this,50);
			}
			
			private function inicializaListaMvecModeloVeiculo():void
			{
				if (MainModel.getInstance().mvecModeloVeiculoArray.length == 0)
				{
					this.controller.atualizaListaMvecModeloVeiculo();
				}
			}
			
			private function creationComplete():void
			{
				this.inicializaListaMvecModeloVeiculo();
				MainModel.getInstance().mvecModeloVeiculoArray.filterFunction = this.controller.mvecModeloVeiculoFilterFunction
				MainModel.getInstance().mvecModeloVeiculoArray.refresh();
			}
			private function labelFunction(item:Object,column:DataGridColumn):String
			{
				switch(column.headerText)
				{
					case "Código":
						return MvecModeloVeiculoVO(item).mvecCodigo;
					case "Descrição":
						return MvecModeloVeiculoVO(item).mvecDescricao;
					case "Cod. Marca":
						return MveiMarcaVeiculo(MvecModeloVeiculoVO(item).mvecMvei).mveiCodigo;
					case "Desc. Marca":
						return MveiMarcaVeiculo(MvecModeloVeiculoVO(item).mvecMvei).mveiDescricao;
					case "Importado":
						return MvecModeloVeiculoVO(item).mvecImportado;
					case "Codigo Gr.":
						return MvecModeloVeiculoVO(item).mvecCodigoGr;
					default:
						return ObjectUtil.toString(MvecModeloVeiculoVO(item).count);
				}
			}
		]]>
	</fx:Script>
	<searchInput:AdvancedSearchInputFX 
		id="textInputFiltro"
		width="100%"
		dataGrid="{this.grid}"
		createFilterFunction="false"
		keyUp="MainModel.getInstance().mvecModeloVeiculoArray.refresh()"
		text="{MainModel.getInstance().zoomFilter}"
		refreshEvent="this.controller.atualizaListaMvecModeloVeiculo()"
		advancedSearchEvent="this.controller.advancedSearchClickEventHandler(event)"/>
	<view:DataGridFX 
		id="grid" 
		labelFunction="labelFunction"
		doubleClickEnabled="true"
		doubleClick="this.controller.mvecModeloVeiculoSelecionado()"
		width="100%" height="100%" 
		dataProvider="{MainModel.getInstance().mvecModeloVeiculoArray}"
		toolTip="Clique sobre o codigo do modelo de veiculo para exibir os detalhes.">
		<view:columns>
			<mx:DataGridColumn 
				sortable="false" 
				dataField="count"
				width="20" 
				headerRenderer="br.com.chapecosolucoes.trafegusweb.client.components.renderers.view.DataGridHeaderRenderer"/>
			<mx:DataGridColumn headerText="Código" dataField="mvecCodigo"/>
			<mx:DataGridColumn headerText="Descrição" dataField="mvecDescricao"/>
			<mx:DataGridColumn headerText="Cod. Marca" dataField="mveiCodigo"/>
			<mx:DataGridColumn headerText="Desc. Marca" dataField="mveiDescricao"/>
			<mx:DataGridColumn headerText="Data Cadastro" dataField="mvecDataCadastro"/>
			<mx:DataGridColumn headerText="Importado" dataField="mvecImportado"/>
			<mx:DataGridColumn headerText="Codigo Gr." dataField="mvecCodigoGr"/>
		</view:columns>
	</view:DataGridFX>
	<view:PaginableComponent 
		id="paginable"
		totalRecords="{MainModel.getInstance().totalListaMvecModeloVeiculo}"
		itensPorPagina="{MainModel.getInstance().itensPorPaginaVO.itensPorPagina}"
		next="this.controller.solicitaListaMvecModeloVeiculo(event)"
		prev="this.controller.solicitaListaMvecModeloVeiculo(event)"
		first="this.controller.solicitaListaMvecModeloVeiculo(event)"
		last="this.controller.solicitaListaMvecModeloVeiculo(event)"/>
	<mx:ControlBar width="100%"
				   horizontalAlign="right">
		<s:Button label="Ok"
				  click="this.controller.mvecModeloVeiculoSelecionado()"/>
		<s:Button label="Cancel"
				  click="this.controller.closeHandler()"/>
	</mx:ControlBar>
</resize:ResizableWindow>
